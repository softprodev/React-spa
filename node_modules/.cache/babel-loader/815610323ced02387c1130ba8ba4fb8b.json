{"ast":null,"code":"import _defineProperty from \"C:\\\\project\\\\spa-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\project\\\\spa-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nvar _objectSpread2;\n\nimport { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport * as AuthAPI from 'lib/auth';\nimport { pender } from 'redux-pender';\nvar SET_LOGGED_INFO = 'user/SET_LOGGED_INFO'; //로그인 정보 설정\n\nvar SET_VALIDATED = 'user/SET_VALIDATED'; // validated 값 설정\n\nvar LOGOUT = 'user/LOGOUT'; //로그 아웃\n\nvar CHECK_STATUS = 'user/CHECK_STATUS'; //현재 로그인 상태 확인\n\nexport var setLoggedInfo = createAction(SET_LOGGED_INFO); // loggedInfo \n\nexport var setValidated = createAction(SET_VALIDATED); // validated\n\nexport var logout = createAction(LOGOUT, AuthAPI.logout);\nexport var checkStatus = createAction(CHECK_STATUS, AuthAPI.checkStatus);\nvar initialState = Map({\n  loggedInfo: Map({\n    //현재 로그인중인 유저의 정보\n    username: null\n  }),\n  logged: false,\n  //현재 로그인중인지 알려준다.\n  validated: false //로그인 중인지 아닌지 한번 서버측에 검증을 했다는걸 의미    \n\n});\nexport default handleActions(_objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, SET_LOGGED_INFO, function (state, action) {\n  return state.set('loggedInfo', Map(action.payload)).set('logged', true);\n}), _defineProperty(_objectSpread2, SET_VALIDATED, function (state, action) {\n  return state.set('validated', action.payload);\n}), _objectSpread2), pender({\n  type: CHECK_STATUS,\n  onSuccess: function onSuccess(state, action) {\n    return state.set('loggedInfo', Map(action.payload.data)).set('validated', true);\n  },\n  onFailure: function onFailure(state, action) {\n    return initialState;\n  }\n})), initialState);","map":{"version":3,"sources":["C:\\project\\spa-project\\src\\redux\\modules\\user.js"],"names":["createAction","handleActions","Map","AuthAPI","pender","SET_LOGGED_INFO","SET_VALIDATED","LOGOUT","CHECK_STATUS","setLoggedInfo","setValidated","logout","checkStatus","initialState","loggedInfo","username","logged","validated","state","action","set","payload","type","onSuccess","data","onFailure"],"mappings":";;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,IAAMC,eAAe,GAAG,sBAAxB,C,CAAgD;;AAChD,IAAMC,aAAa,GAAG,oBAAtB,C,CAA4C;;AAC5C,IAAMC,MAAM,GAAG,aAAf,C,CAA8B;;AAC9B,IAAMC,YAAY,GAAG,mBAArB,C,CAA2C;;AAE3C,OAAO,IAAMC,aAAa,GAAGT,YAAY,CAACK,eAAD,CAAlC,C,CAAqD;;AAC5D,OAAO,IAAMK,YAAY,GAAGV,YAAY,CAACM,aAAD,CAAjC,C,CAAkD;;AACzD,OAAO,IAAMK,MAAM,GAAGX,YAAY,CAACO,MAAD,EAASJ,OAAO,CAACQ,MAAjB,CAA3B;AACP,OAAO,IAAMC,WAAW,GAAGZ,YAAY,CAACQ,YAAD,EAAcL,OAAO,CAACS,WAAtB,CAAhC;AAEP,IAAMC,YAAY,GAAGX,GAAG,CAAC;AACrBY,EAAAA,UAAU,EAAGZ,GAAG,CAAE;AAAE;AACZa,IAAAA,QAAQ,EAAE;AADA,GAAF,CADK;AAIrBC,EAAAA,MAAM,EAAE,KAJa;AAIL;AAChBC,EAAAA,SAAS,EAAE,KALU,CAKJ;;AALI,CAAD,CAAxB;AAQA,eAAehB,aAAa,qEACvBI,eADuB,EACJ,UAACa,KAAD,EAAQC,MAAR;AAAA,SAAmBD,KAAK,CAACE,GAAN,CAAU,YAAV,EAAuBlB,GAAG,CAACiB,MAAM,CAACE,OAAR,CAA1B,EAA4CD,GAA5C,CAAgD,QAAhD,EAAyD,IAAzD,CAAnB;AAAA,CADI,mCAEvBd,aAFuB,EAEN,UAACY,KAAD,EAAOC,MAAP;AAAA,SAAkBD,KAAK,CAACE,GAAN,CAAU,WAAV,EAAsBD,MAAM,CAACE,OAA7B,CAAlB;AAAA,CAFM,oBAGrBjB,MAAM,CAAC;AACNkB,EAAAA,IAAI,EAAEd,YADA;AAENe,EAAAA,SAAS,EAAG,mBAACL,KAAD,EAAOC,MAAP;AAAA,WAAkBD,KAAK,CAACE,GAAN,CAAU,YAAV,EAAuBlB,GAAG,CAACiB,MAAM,CAACE,OAAP,CAAeG,IAAhB,CAA1B,EAAiDJ,GAAjD,CAAqD,WAArD,EAAiE,IAAjE,CAAlB;AAAA,GAFN;AAGNK,EAAAA,SAAS,EAAG,mBAACP,KAAD,EAAOC,MAAP;AAAA,WAAkBN,YAAlB;AAAA;AAHN,CAAD,CAHe,GAQ1BA,YAR0B,CAA5B","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport * as AuthAPI from 'lib/auth';\nimport { pender } from 'redux-pender';\n\nconst SET_LOGGED_INFO = 'user/SET_LOGGED_INFO'; //로그인 정보 설정\nconst SET_VALIDATED = 'user/SET_VALIDATED'; // validated 값 설정\nconst LOGOUT = 'user/LOGOUT'; //로그 아웃\nconst CHECK_STATUS = 'user/CHECK_STATUS' ; //현재 로그인 상태 확인\n\nexport const setLoggedInfo = createAction(SET_LOGGED_INFO); // loggedInfo \nexport const setValidated = createAction(SET_VALIDATED); // validated\nexport const logout = createAction(LOGOUT, AuthAPI.logout); \nexport const checkStatus = createAction(CHECK_STATUS,AuthAPI.checkStatus);\n\nconst initialState = Map({\n    loggedInfo : Map ({ //현재 로그인중인 유저의 정보\n            username: null\n    }),\n    logged: false , //현재 로그인중인지 알려준다.\n    validated: false //로그인 중인지 아닌지 한번 서버측에 검증을 했다는걸 의미    \n});\n\nexport default handleActions({\n    [SET_LOGGED_INFO] : (state, action) => state.set('loggedInfo',Map(action.payload)).set('logged',true),\n    [SET_VALIDATED] : (state,action) => state.set('validated',action.payload),\n    ...pender({\n        type: CHECK_STATUS,\n        onSuccess : (state,action) => state.set('loggedInfo',Map(action.payload.data)).set('validated',true),\n        onFailure : (state,action) => initialState\n    })\n},initialState);"]},"metadata":{},"sourceType":"module"}