{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\project\\\\spa-project\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\project\\\\spa-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\project\\\\spa-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\project\\\\spa-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\project\\\\spa-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\project\\\\spa-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\project\\\\spa-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\project\\\\spa-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\project\\\\spa-project\\\\src\\\\containers\\\\Auth\\\\Register.js\";\nimport React, { Component } from 'react';\nimport { AuthContent, RightAlignedLink, AuthError } from '../../components/Auth';\nimport './Register.scss';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as authActions from '../../redux/modules/auth';\nimport * as userActions from '../../redux/modules/user';\nimport { isEmail, isLength, isAlphanumeric } from 'validator';\nimport storage from 'lib/storage';\n\nvar Register =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Register, _Component);\n\n  function Register() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Register);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Register)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.setError = function (message) {\n      var AuthActions = _this.props.AuthActions;\n      AuthActions.setError({\n        form: 'register',\n        message: message\n      });\n    };\n\n    _this.validate = {\n      email: function email(value) {\n        if (!isEmail(value)) {\n          _this.setError('잘못된 이메일 형식 입니다.');\n\n          return false;\n        }\n\n        return true;\n      },\n      username: function username(value) {\n        if (!isAlphanumeric(value) || !isLength(value, {\n          min: 4,\n          max: 15\n        })) {\n          _this.setError('아이디는 4~15글자의 알파벳 혹은 숫자로 이루어져야 합니다.');\n\n          return false;\n        }\n\n        return true;\n      },\n      password: function password(value) {\n        if (!isLength(value, {\n          min: 6\n        })) {\n          _this.setError('비밀번호는 6자 이상입니다.');\n\n          return false;\n        }\n\n        _this.setError(null);\n\n        return true;\n      },\n      passwordConfirm: function passwordConfirm(value) {\n        if (_this.props.form.get('password') !== value) {\n          _this.setError('비밀번호확인이 일치하지 않습니다.');\n\n          return false;\n        }\n\n        _this.setError(null);\n\n        return true;\n      }\n    };\n\n    _this.checkEmailExists =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(email) {\n        var AuthActions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AuthActions = _this.props.AuthActions;\n                _context.prev = 1;\n                _context.next = 4;\n                return AuthActions.checkEmailExists(email);\n\n              case 4:\n                if (_this.props.exists.get('email')) {\n                  _this.setError('이미 존재하는 이메일입니다.');\n                } else {\n                  _this.setError(null);\n                }\n\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                console.log(_context.t0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.checkUsernameExists =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(username) {\n        var AuthActions;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                AuthActions = _this.props.AuthActions;\n                _context2.prev = 1;\n                _context2.next = 4;\n                return AuthActions.checkUsernameExists(username);\n\n              case 4:\n                if (_this.props.exists.get('username')) {\n                  _this.setError('이미 존재하는 아이디입니다.');\n                } else {\n                  _this.setError(null);\n                }\n\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](1);\n                console.log(_context2.t0);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 7]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handleChange = function (e) {\n      var AuthActions = _this.props.AuthActions;\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n      AuthActions.changeInput({\n        name: name,\n        value: value,\n        form: 'register'\n      });\n      /*\r\n      const validation = this.validate[name](value);\r\n      if(name.indexOf('password') > -1 || !validation) return ; \r\n      //비밀번호 검증이거나, 검증 실패시 여기에서 끝 마침.\r\n      \r\n          //이메일, 아이디 중복 확인`\r\n              const check = name === 'email' ? this.checkEmailExists : this.checkUsernameExists; \r\n              check(value);\r\n      */\n    };\n\n    _this.handleLocalRegister =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var _this$props, form, AuthActions, UserActions, error, history, _form$toJS, email, username, password, passwordConfirm, _assertThisInitialize, validate, loggedInfo, key, message;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this$props = _this.props, form = _this$props.form, AuthActions = _this$props.AuthActions, UserActions = _this$props.UserActions, error = _this$props.error, history = _this$props.history;\n              _form$toJS = form.toJS(), email = _form$toJS.email, username = _form$toJS.username, password = _form$toJS.password, passwordConfirm = _form$toJS.passwordConfirm;\n              _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)), validate = _assertThisInitialize.validate;\n              validate['email'](email);\n              validate['username'](username);\n              validate['password'](password);\n              validate['passwordConfirm'](passwordConfirm);\n\n              if (!error) {\n                _context3.next = 9;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 9:\n              if (!(!validate['email'](email) || !validate['username'](username) || !validate['password'](password) || !validate['passwordConfirm'](passwordConfirm))) {\n                _context3.next = 11;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 11:\n              _context3.prev = 11;\n              _context3.next = 14;\n              return AuthActions.localRegister({\n                email: email,\n                username: username,\n                password: password\n              });\n\n            case 14:\n              loggedInfo = _this.props.result.toJS();\n              storage.set('loggedInfo', loggedInfo);\n              UserActions.setLoggedInfo(loggedInfo);\n              UserActions.setValidated(true); //로그인 정보 저장\n\n              history.push('/Auth/login/local'); //회원가입 성공시 홈페이지로 이동 \n\n              _context3.next = 27;\n              break;\n\n            case 21:\n              _context3.prev = 21;\n              _context3.t0 = _context3[\"catch\"](11);\n\n              if (!(_context3.t0.response.status === 409)) {\n                _context3.next = 27;\n                break;\n              }\n\n              key = _context3.t0.response.data.key;\n              message = key === 'email' ? ' 이미 존재하는 이메일입니다 ' : '이미 존재하는 유저네임입니다';\n              return _context3.abrupt(\"return\", _this.setError(message));\n\n            case 27:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this, [[11, 21]]);\n    }));\n    return _this;\n  }\n\n  _createClass(Register, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var AuthActions = this.props.AuthActions;\n      AuthActions.initializeForm('register');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var error = this.props.error;\n\n      var _this$props$form$toJS = this.props.form.toJS(),\n          email = _this$props$form$toJS.email,\n          username = _this$props$form$toJS.username,\n          password = _this$props$form$toJS.password,\n          passwordConfirm = _this$props$form$toJS.passwordConfirm;\n\n      var handleChange = this.handleChange,\n          handleLocalRegister = this.handleLocalRegister;\n      return React.createElement(AuthContent, {\n        title: \"Register\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"email\",\n        placeholder: \"E-mail\",\n        value: email,\n        onChange: handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        name: \"username\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        name: \"password\",\n        placeholder: \"Password\",\n        type: \"password\",\n        value: password,\n        onChange: handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        name: \"passwordConfirm\",\n        placeholder: \"Confirm Password\",\n        type: \"password\",\n        value: passwordConfirm,\n        onChange: handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), error && React.createElement(AuthError, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, error), React.createElement(\"button\", {\n        onClick: handleLocalRegister,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"Sign up\"), React.createElement(RightAlignedLink, {\n        to: \"/auth/login/local\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Login?\"));\n    }\n  }]);\n\n  return Register;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    form: state.auth.getIn(['register', 'form']),\n    error: state.auth.getIn(['register', 'error']),\n    exists: state.auth.getIn(['register', 'exists']),\n    result: state.auth.get('result')\n  };\n}, function (dispatch) {\n  return {\n    AuthActions: bindActionCreators(authActions, dispatch),\n    UserActions: bindActionCreators(userActions, dispatch)\n  };\n})(Register);","map":{"version":3,"sources":["C:\\project\\spa-project\\src\\containers\\Auth\\Register.js"],"names":["React","Component","AuthContent","RightAlignedLink","AuthError","connect","bindActionCreators","authActions","userActions","isEmail","isLength","isAlphanumeric","storage","Register","setError","message","AuthActions","props","form","validate","email","value","username","min","max","password","passwordConfirm","get","checkEmailExists","exists","console","log","checkUsernameExists","handleChange","e","target","name","changeInput","handleLocalRegister","UserActions","error","history","toJS","localRegister","loggedInfo","result","set","setLoggedInfo","setValidated","push","response","status","key","data","initializeForm","state","auth","getIn","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { AuthContent,RightAlignedLink,AuthError } from '../../components/Auth';\r\nimport './Register.scss';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators } from 'redux';\r\nimport * as authActions from '../../redux/modules/auth';\r\nimport * as userActions from '../../redux/modules/user';\r\nimport {isEmail, isLength, isAlphanumeric } from 'validator';\r\nimport storage from 'lib/storage';\r\n\r\nclass Register extends Component {\r\n    componentWillUnmount() {\r\n        const { AuthActions } = this.props;\r\n        AuthActions.initializeForm('register')\r\n    }\r\n\r\n    setError = (message) => { \r\n        const {AuthActions } = this.props;\r\n        AuthActions.setError({\r\n            form : 'register',\r\n            message \r\n        });\r\n    }\r\n\r\n    validate = {\r\n        email : (value) => {\r\n            if(!isEmail(value)) {\r\n                this.setError('잘못된 이메일 형식 입니다.');\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        username: (value) => {\r\n            if(!isAlphanumeric(value) || !isLength(value, {min:4, max:15})) {\r\n                this.setError('아이디는 4~15글자의 알파벳 혹은 숫자로 이루어져야 합니다.');\r\n               return false;\r\n            }\r\n              return true;\r\n        },\r\n        password: ( value) => {\r\n            if(!isLength(value, {min:6 })) {\r\n                this.setError('비밀번호는 6자 이상입니다.');\r\n                return false;\r\n            }\r\n            this.setError(null);\r\n            return true;\r\n        },\r\n        passwordConfirm : (value) => {\r\n            if(this.props.form.get('password') !== value) {\r\n                this.setError('비밀번호확인이 일치하지 않습니다.');\r\n                return false;\r\n            }\r\n            this.setError(null);\r\n            return true;\r\n        }\r\n    };\r\n\r\n\r\n\r\n    checkEmailExists = async(email)=>{\r\n        const { AuthActions } = this.props;\r\n        try{\r\n            await AuthActions.checkEmailExists(email);\r\n            if(this.props.exists.get('email')){\r\n                this.setError('이미 존재하는 이메일입니다.');\r\n            } else{\r\n                this.setError(null);\r\n            }\r\n        }catch(e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n    checkUsernameExists = async(username) =>{\r\n        const {AuthActions } = this.props;\r\n        try{\r\n            await AuthActions.checkUsernameExists(username);\r\n            if(this.props.exists.get('username')){\r\n                this.setError('이미 존재하는 아이디입니다.');\r\n            } else{\r\n                this.setError(null);\r\n            }\r\n        }catch(e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    handleChange = (e) => {\r\n        const {AuthActions } = this.props;\r\n        const { name, value } = e.target;\r\n\r\n        AuthActions.changeInput({\r\n            name,\r\n            value,\r\n            form: 'register'\r\n        });\r\n        /*\r\n        const validation = this.validate[name](value);\r\n        if(name.indexOf('password') > -1 || !validation) return ; \r\n        //비밀번호 검증이거나, 검증 실패시 여기에서 끝 마침.\r\n        \r\n            //이메일, 아이디 중복 확인`\r\n                const check = name === 'email' ? this.checkEmailExists : this.checkUsernameExists; \r\n                check(value);\r\n*/\r\n    }\r\nhandleLocalRegister = async () => {\r\n    const { form, AuthActions,UserActions,error,history } = this.props;\r\n    const { email, username ,password, passwordConfirm} = form.toJS();\r\n\r\n    const { validate } =this;\r\n    \r\n    validate['email'](email);\r\n    validate['username'](username);\r\n    validate['password'](password);\r\n    validate['passwordConfirm'](passwordConfirm);\r\n\r\n    if(error) return ; //에러가 있을시 리턴함\r\n    if(!validate['email'](email)\r\n    || !validate['username'](username)\r\n    || !validate['password'](password)\r\n    ||!validate['passwordConfirm'](passwordConfirm)){\r\n        //하나라도 실패할시 진행하지 않는다.\r\n                return ;\r\n    }\r\n    \r\n\r\n\r\ntry { \r\n    await AuthActions.localRegister({\r\n        email, username,password\r\n    });\r\n    const loggedInfo = this.props.result.toJS();\r\n    storage.set('loggedInfo',loggedInfo);\r\n    UserActions.setLoggedInfo(loggedInfo);\r\n    UserActions.setValidated(true);\r\n    //로그인 정보 저장\r\n    history.push('/Auth/login/local'); //회원가입 성공시 홈페이지로 이동 \r\n} catch(e) {\r\n    if(e.response.status === 409 ) {\r\n        const { key } = e.response.data ;\r\n        const message = key ==='email' ? ' 이미 존재하는 이메일입니다 ' : '이미 존재하는 유저네임입니다';\r\n        return this.setError(message);\r\n    }\r\n  \r\n    }\r\n};\r\n\r\n    render() {\r\n        const { error } = this.props;\r\n        const { email, username, password, passwordConfirm } = this.props.form.toJS();\r\n        const { handleChange,handleLocalRegister } = this;\r\n        return (\r\n            <AuthContent title=\"Register\">\r\n            <input name=\"email\" placeholder=\"E-mail\" value={email} onChange={handleChange}/>\r\n            <input name=\"username\" placeholder=\"Username\" value={username}  onChange={handleChange}/>\r\n            <input name=\"password\" placeholder=\"Password\" type=\"password\" value={password}  onChange={handleChange}/>\r\n            <input name=\"passwordConfirm\" placeholder=\"Confirm Password\" type=\"password\" value={passwordConfirm}  onChange={handleChange}/> \r\n            {\r\n                error && <AuthError>{error}</AuthError>\r\n            }\r\n            <button onClick={handleLocalRegister}>Sign up</button>\r\n            <RightAlignedLink to=\"/auth/login/local\">Login?</RightAlignedLink>\r\n         \r\n            </AuthContent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        form: state.auth.getIn(['register', 'form']),\r\n        error : state.auth.getIn(['register','error']),\r\n        exists : state.auth.getIn(['register','exists']),\r\n        result : state.auth.get('result')\r\n    }),\r\n    (dispatch) => ({\r\n        AuthActions: bindActionCreators(authActions, dispatch),\r\n        UserActions :bindActionCreators(userActions,dispatch)\r\n    })\r\n)(Register);"]},"metadata":{},"sourceType":"module"}