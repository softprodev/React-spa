{"ast":null,"code":"import _defineProperty from \"C:\\\\project\\\\spa-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\project\\\\spa-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nvar _objectSpread2;\n\nimport { createAction, handleActions } from 'redux-actions';\nimport { pender } from 'redux-pender';\nimport * as AuthAPI from '../../lib/auth';\nimport { Map } from 'immutable'; //액션 타입정의\n\nvar CHANGE_INPUT = 'auth/CHANGE_INPUT'; //input 값 변경\n\nvar INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; //form값  초기화\n\nvar CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS'; //이메일 중복확인\n\nvar CHECK_USERNAME_EXISTS = 'auth/CHECK_USERNAME_EXISTS'; //아이디 중복 확인\n\nvar LOCAL_REGISTER = 'auth/LOCAL_REGISTER'; // 회원 가입\n\nvar LOCAL_LOGIN = 'auth/LOCAL_LOGIN'; //로그인\n\nvar LOGOUT = 'auth/LOGOUT'; //로그아웃\n\nvar SET_ERROR = 'auth/SET_ERROR'; //오류 설정 \n//액션 생성함수 생성\n\nexport var checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists);\nexport var checkUsernameExists = createAction(CHECK_USERNAME_EXISTS, AuthAPI.checkUsernameExists);\nexport var changeInput = createAction(CHANGE_INPUT);\nexport var initializeForm = createAction(INITIALIZE_FORM);\nexport var localRegister = createAction(LOCAL_REGISTER, AuthAPI.localRegister);\nexport var localLogin = createAction(LOCAL_LOGIN, AuthAPI.localLogin);\nexport var logout = createAction(LOGOUT, AuthAPI.logout);\nexport var setError = createAction(SET_ERROR);\nvar initialState = Map({\n  register: Map({\n    error: '',\n    form: Map({\n      email: '',\n      username: '',\n      password: '',\n      passwordConfirm: ''\n    }),\n    exists: Map({\n      email: false,\n      password: false,\n      username: false\n    })\n  }),\n  login: Map({\n    form: Map({\n      email: '',\n      password: ''\n    }),\n    error: ''\n  }),\n  result: Map({})\n}); //handleaction의 첫 번째 파라미터는 액션을 처리하는 함수들로 이루어진 객체,\n//두번째는 초기상태\n\nexport default handleActions(_objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, CHANGE_INPUT, function (state, action) {\n  var _action$payload = action.payload,\n      form = _action$payload.form,\n      name = _action$payload.name,\n      value = _action$payload.value;\n  return state.setIn([form, 'form', name], value);\n}), _defineProperty(_objectSpread2, INITIALIZE_FORM, function (state, action) {\n  var initialForm = initialState.get(action.payload);\n  return state.set(action.payload, initialForm);\n}), _defineProperty(_objectSpread2, SET_ERROR, function (state, action) {\n  var _action$payload2 = action.payload,\n      form = _action$payload2.form,\n      message = _action$payload2.message;\n  return state.setIn([form, 'error'], message);\n}), _objectSpread2), pender({\n  type: CHECK_EMAIL_EXISTS,\n  onSuccess: function onSuccess(state, action) {\n    return state.setIn(['register', 'exists', 'email'], action.payload.data.exists);\n  }\n}), pender({\n  type: CHECK_USERNAME_EXISTS,\n  onSuccess: function onSuccess(state, action) {\n    return state.setIn(['register', 'exists', 'username'], action.payload.data.exists);\n  }\n}), pender({\n  type: LOCAL_LOGIN,\n  onSuccess: function onSuccess(state, action) {\n    return state.set('result', Map(action.payload.data));\n  }\n}), pender({\n  type: LOCAL_REGISTER,\n  onSuccess: function onSuccess(state, action) {\n    return state.set('result', Map(action.payload.data));\n  }\n})), initialState);","map":{"version":3,"sources":["C:\\project\\spa-project\\src\\redux\\modules\\auth.js"],"names":["createAction","handleActions","pender","AuthAPI","Map","CHANGE_INPUT","INITIALIZE_FORM","CHECK_EMAIL_EXISTS","CHECK_USERNAME_EXISTS","LOCAL_REGISTER","LOCAL_LOGIN","LOGOUT","SET_ERROR","checkEmailExists","checkUsernameExists","changeInput","initializeForm","localRegister","localLogin","logout","setError","initialState","register","error","form","email","username","password","passwordConfirm","exists","login","result","state","action","payload","name","value","setIn","initialForm","get","set","message","type","onSuccess","data"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { pender} from 'redux-pender';\nimport * as AuthAPI from '../../lib/auth';\nimport { Map } from 'immutable';\n\n//액션 타입정의\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT';  //input 값 변경\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';//form값  초기화\nconst CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS'; //이메일 중복확인\nconst CHECK_USERNAME_EXISTS = 'auth/CHECK_USERNAME_EXISTS';//아이디 중복 확인\nconst LOCAL_REGISTER = 'auth/LOCAL_REGISTER';// 회원 가입\nconst LOCAL_LOGIN= 'auth/LOCAL_LOGIN'; //로그인\nconst LOGOUT='auth/LOGOUT';//로그아웃\nconst SET_ERROR = 'auth/SET_ERROR'; //오류 설정 \n//액션 생성함수 생성\nexport const checkEmailExists = createAction(CHECK_EMAIL_EXISTS,AuthAPI.checkEmailExists);\nexport const checkUsernameExists = createAction(CHECK_USERNAME_EXISTS,AuthAPI.checkUsernameExists);\nexport const changeInput = createAction(CHANGE_INPUT);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const localRegister = createAction(LOCAL_REGISTER,AuthAPI.localRegister);\nexport const localLogin = createAction(LOCAL_LOGIN,AuthAPI.localLogin); \nexport const logout = createAction(LOGOUT,AuthAPI.logout);\nexport const setError = createAction(SET_ERROR);\nconst initialState = Map({\n    register: Map({\n        error:'',\n        form: Map({\n            email: '',\n            username: '',\n            password: '',\n            passwordConfirm : ''\n        }),\n        exists: Map({\n            email: false,\n            password : false,\n            username: false\n        }),\n        \n    }),\n    login: Map({\n        form: Map({\n            email: '',\n            password: ''\n        }),\n        error:''\n    }),\n    result : Map ({})\n});\n\n//handleaction의 첫 번째 파라미터는 액션을 처리하는 함수들로 이루어진 객체,\n//두번째는 초기상태\nexport default handleActions({\n    [CHANGE_INPUT] : (state,action) => {\n        const {form, name, value } = action.payload;\n        return state.setIn([form, 'form',name],value);\n    },\n    [INITIALIZE_FORM] : (state,action) => {\n        const initialForm = initialState.get(action.payload);\n        return state.set(action.payload, initialForm);\n    },\n    [SET_ERROR] : (state,action) => {\n        const {form,message} = action.payload;\n        return state.setIn([form, 'error'],message);\n    },\n    ...pender({\n        type: CHECK_EMAIL_EXISTS,\n        onSuccess: (state, action) => state.setIn(['register','exists','email'],action.payload.data.exists)\n    }),\n    ...pender({\n        type:CHECK_USERNAME_EXISTS,\n        onSuccess: (state, action) => state.setIn(['register','exists','username'],action.payload.data.exists)\n    }),\n    ...pender({\n        type:LOCAL_LOGIN,\n        onSuccess : (state,action) => state.set('result',Map(action.payload.data))\n    }),\n    ...pender({\n        type:LOCAL_REGISTER,\n        onSuccess : (state,action) => state.set('result',Map(action.payload.data))\n    })\n},initialState);"]},"metadata":{},"sourceType":"module"}